---
description: Regras e diretrizes para desenvolvimento de demos no Databricks
globs: 
alwaysApply: true
---

# Diretrizes Gerais

## Idioma e Documentação
- Todos os comentários no código e textos explicativos em markdown devem ser em Português - BR
- Sempre referencie as documentações oficiais e as documentações que já estão anexadas na própria IDE
- Em qualquer código ou exemplo, sempre adicione comentários explicativos para que leigos consigam acompanhar

## Estrutura do Notebook
- Todos os notebooks devem ser self-contained quando possível
- Utilize o tipo source conforme descrito em: https://learn.microsoft.com/en-us/azure/databricks/notebooks/notebook-format
- Para referência de formato, consulte: [rls_column_masking_demo.sql](mdc:BONUS_row_level_security_column_masking/rls_column_masking_demo.sql)

## Unity Catalog e Schema
- Todos os assets devem ser criados no Unity Catalog no catálogo: `dev_hands_on`
- O schema deve ser baseado no nome do usuário executante, com "." substituído por "_"
- Exemplo de código para obter o nome do usuário formatado:
```python
user_name = dbutils.notebook.entry_point.getDbutils().notebook().getContext().userName()
user_name = user_name.toString().split('@')[0].split('(')[1].replace('.', '_')
```

## Configuração de Catalog e Schema
Ao iniciar um notebook, adicione:
```sql
use catalog dev_hands_on;
use schema IDENTIFIER(schema_name);
```

## Limpeza de Assets
- No final de cada notebook, todos os assets criados devem ser deletados (exceto o catálogo e o schema)

# Diretrizes de Código

## Variáveis Python e SQL
- Ao definir uma variável em Python para uso em SQL:
  1. Crie a variável SQL primeiro
  2. Use `spark.sql()` seguindo: https://docs.databricks.com/aws/en/sql/language-manual/sql-ref-syntax-aux-set-variable

## Referenciando Objetos com Variáveis
```sql
select * from IDENTIFIER("dev_hands_on." || schema_name || ".funcionarios")
```

## Row Filters
- Consulte a documentação: https://docs.databricks.com/aws/en/tables/row-and-column-filters
- Sintaxe do comando SET ROW FILTER (sem schema e catálogo):
```sql
SET ROW FILTER ti_filter ON (departamento);
```

## Column Masking
Sintaxe para aplicar máscara em coluna:
```sql
ALTER TABLE <table_name> ALTER COLUMN <col_name> SET MASK <mask_func_name> USING COLUMNS <additional_columns>;
```
